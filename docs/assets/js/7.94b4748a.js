(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{370:function(s,a,n){"use strict";n.r(a);var r=n(25),t=Object(r.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"柯里化是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#柯里化是什么"}},[s._v("#")]),s._v(" 柯里化是什么")]),s._v(" "),n("p",[s._v("柯里化是一种转换，将 f(a,b,c) 转换为可以被以 f(a)(b)(c) 的形式进行调用。参数数量满足，执行函数。参数数量不足，则返回偏函数。\n柯里化不会调用函数。它只是对函数进行转换：let curried = curry(fn)")]),s._v(" "),n("h3",{attrs:{id:"柯里化有什么用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#柯里化有什么用"}},[s._v("#")]),s._v(" 柯里化有什么用")]),s._v(" "),n("p",[s._v("固定不变的参数\n举个例子，计算体积")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function volume(l, w, h) {\n    return l * w * h\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在一组参数中，高度 h 都是固定的 100。另一组参数中，h 都是固定的 200")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { curry } from 'lodash'\nlet curriedFn = curry(volume)\nlet curried1 = curriedFn(100)\nlet curried2 = curriedFn(200)\ncurried1(2, 3)  // 600\ncurried2(1, 2)  // 400\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"柯里化怎么使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#柯里化怎么使用"}},[s._v("#")]),s._v(" 柯里化怎么使用")]),s._v(" "),n("p",[s._v("柯里化接收一个参数：需要被柯里化的函数（如下文的 add）.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { curry } from 'lodash'\nfunction add( fixed1, fixed2 ,x, y, z) {\n    return x + y + z + fixed1 + fixed2\n}\nlet curried = curry(add)\ncurried(1)(2)(3)  // 36\ncurried(1)(2, 3)  // 36\ncurried(1, 2, 3)  // 36\ncurried(1, 2)(3)  // 36\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("或者(伪代码)：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let currided = curry(ajax)\n$.post = curried(post)\n$.get = curried(get)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"实现一个柯里化函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现一个柯里化函数"}},[s._v("#")]),s._v(" 实现一个柯里化函数")]),s._v(" "),n("p",[s._v("当传入的参数个数小于函数需要的参数个数时，闭包保存参数。 等于时，即达到函数需要的参数个数，此时执行函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// fn: curry 传入需要被柯里化的函数 \n// arr: 是目前已经传入的所有参数合集. arr 不存在默认是空数组，存在就是添加过的参数合集\nvar curry = function curry (fn, argsList) {\n  argsList = argsList || []\n  // 柯里化返回一个函数 \n  return function () {\n    var args = [].slice.call(arguments)\n    argsList = argsList.concat(args)\n    // return 函数执行的结果 或者 return 一个函数\n    return argsList.length >= fn.length \n      ? fn.apply(null, argsList)    \n      : curry(fn, argsList)\n    }\n}\n// es6\nconst curry = fn => (...args) => fn.bind(null, ...args) \n\nconst curry = (fn, argsList = []) => (...args) => {\n    argsList.length >= fn.legnth\n        ? fn(...argsList)\n        : curry(fn, argsList)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"偏函数-部分应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#偏函数-部分应用"}},[s._v("#")]),s._v(" 偏函数（部分应用）")]),s._v(" "),n("p",[s._v("fn('a', 'b', 'c')\nlet partialed = partial(fn, 'a', 'b')\npartialed('c')\n偏函数：接受一个函数 fn ,传入部分参数，返回一个接受剩余参数的新函数 partialed。\nbind 就是一个偏函数")]),s._v(" "),n("h3",{attrs:{id:"柯里化和偏函数的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#柯里化和偏函数的区别"}},[s._v("#")]),s._v(" 柯里化和偏函数的区别")]),s._v(" "),n("p",[s._v("柯里化：将 fn 转化为 x 个接收 1 个参数的函数。 柯里化后的函数可多次调用，直到参数个数满足。\n偏函数：初始化传入参数，返回一个接收剩余参数的函数。partial 后只可调用一次。")]),s._v(" "),n("h3",{attrs:{id:"偏函数的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#偏函数的实现"}},[s._v("#")]),s._v(" 偏函数的实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function partial(fn) {\n    var initArgs = [].slice.call(arguments, 1)\n    return function () {\n        var otherArgs = [].slice.call(arguments)\n        return fn.apply(null, initArgs.concat(otherArgs))\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);